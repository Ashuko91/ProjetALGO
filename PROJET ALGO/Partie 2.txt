#include <stdio.h>
#include <stdlib.h>
#define AND &&
#define OR ||
#define ISNOT !=
#define NOT !
#define then

typedef enum { FALSE, TRUE} bool;

typedef struct Bloc
{
    int nombre;
    struct Bloc *suivant;
} Bloc;

typedef Bloc *Liste ;

void initVide( Liste *L)
{
    *L = NULL ;
}

bool estVide(Liste l)
{
    return l == NULL ;
}

int premier(Liste l)
{
    return l->nombre ; 
}

Liste ajoute(int x, Liste l)
{
    Liste tmp = (Liste) malloc(sizeof(Bloc)) ;
    tmp->nombre = x ;
    tmp->suivant = l ;
    return tmp ;
}

void empile(int x, Liste *L)
{
      *L = ajoute(x,*L) ; 
}

Liste suite(Liste l)
{
    return l->suivant ;
}


void depile(Liste *L)
{
    Liste tmp = *L ;
    *L = suite(*L) ;
    free(tmp) ;
}

void affiche_rec(Liste l)
{
    if(estVide(l))
        printf("\n");
    else
    {
        printf("%d ", premier(l));
        affiche_rec(suite(l));
    }
}


void affiche_iter(Liste l)
{
    Liste L2 = l;
    while(!estVide(L2))
    {
        printf("%d ", premier(L2));
        L2 = suite(L2);
    }
    printf("\n");
}

int longueur_rec (Liste l)
{
    if (l == NULL)
         return 0 ;
    else return (1 + longueur_rec(l->suivant)) ;
}



int longueur_iter (Liste l)
{
    Liste P = l;
    int cpt = 0 ;
    while (P ISNOT NULL)
    {   P = P->suivant ;
        cpt++ ;
    }
    return cpt ;
}

void VD (Liste *L)
          // *L non NULL ie liste non vide
{
     if ( ((**L).suivant) == NULL )
            depile(L) ;   // moralement : depile(& (*L)) ;
     else VD (& ( (**L).suivant )) ;
}

void VireDernier_rec (Liste *L)
{
     if ( (*L) ISNOT NULL )
          VD(L);        // moralement : VD(& (*L)) ;
}

void VireDernier_iter (Liste *L)
{
    if ( (*L) ISNOT NULL)
    {
        while ( ((**L).suivant) ISNOT NULL )
                 L = & ( (**L).suivant ) ;
        free(*L) ;
        *L = NULL ;
     }
}

void VideListe(Liste *L)
{
    if(NOT(estVide(*L)))
    {
        depile(L);
        VideListe(L);
    }
      
}

void poup (Liste l)
{
        printf("Double Affichage \n") ;
        affiche_rec(l) ;
        affiche_iter(l) ;

        printf("Longueur en double %d %d \n\n", 
                           longueur_rec(l), 
                           longueur_iter(l) 
               ) ;
}

bool Pluscourte(Liste l1, Liste l2){
    return longueur_rec(l1) < longueur_rec(l2);
}

bool ZeroEnPositionUnOuDeuxOuTrois (Liste l){
    if(estVide(l)){
        return FALSE;
    }else if(premier(l)==0 || suite(premier(l))==0 || suite(suite(premier(l)))==0){
        return TRUE;
    }
}

int NombreDe0AvantPositionK(Liste L,int k){
    int cpt;
    if(estVide(L)){
        return 0;
    }else {
        if(premier(L)==0){
            cpt++;
        }
        NombreDe0AvantPositionK(suite(L),k);
        
    }
    return cpt;
        
}


int main(int argc, char** argv)
{
    Liste l1 ;
    
        initVide (&l1) ;
        
         

             empile(0, &l1) ;
             empile(6, &l1) ;
             empile(7, &l1) ;
             empile(8, &l1) ;
             empile(9, &l1) ;

          poup(l1) ;
         
        printf("res : %d",NombreDe0AvantPositionK(l1,4));  
          
        /*if(ZeroEnPositionUnOuDeuxOuTrois(l1)){
            printf("true");
        }else{
            printf("false");
        }*/
    VideListe(&l1);
    
    return 0;
}
